//@version=5

indicator(title = "Market Maker Session Times", overlay = true)

// Inputs
// ============================================================================================================
// General time constraint for a strategy
int startDateTime = input.time(timestamp("1 Feb 2021 00:00"), title="Start Date", group="Strategy Date Range", 
     tooltip="Specifies the starting date and time from which on the strategy simulates buy and sell trades.")
int endDateTime = input.time(timestamp("1 Feb 2022 11:59"), title="End Date", group="Strategy Date Range", 
     tooltip="Specifies the ending date and time from which on the strategy simulates buy and sell trades.")
bool showMarketSessionInfoTable = false
bool showMarketSessionOpenCandles = true

string sessionInput = input.session("0900-1730", title="Session Times", 
     group="Trading Session", tooltip="Use the checkboxes to select " + 
     "on which days of the week this session is active. The session " +
     "has to be active on at least one day.")
bool monSession = input.bool(true, title="Mon ", group="Trading Session", inline="d1")
bool tueSession = input.bool(true, title="Tue ", group="Trading Session", inline="d1")
bool wedSession = input.bool(true, title="Wed ", group="Trading Session", inline="d1")
bool thuSession = input.bool(true, title="Thu ", group="Trading Session", inline="d1")
bool friSession = input.bool(true, title="Fri   ", group="Trading Session", inline="d2")
bool satSession = input.bool(false, title="Sat  ", group="Trading Session", inline="d2")
bool sunSession = input.bool(false, title="Sun ", group="Trading Session", inline="d2")

// Calculate Session Info
// ============================================================================================================
getSessionDays(sunSession, monSession, tueSession, wedSession, thuSession, friSession, satSession) =>
    string sessionDays = ""
    if sunSession
        sessionDays += "1"
    if monSession
        sessionDays += "2"
    if tueSession
        sessionDays += "3"
    if wedSession
        sessionDays += "4"
    if thuSession
        sessionDays += "5"
    if friSession
        sessionDays += "6"
    if satSession
        sessionDays += "7"

// Make a days of week string based on the value of the input checkboxes
string sessionDays = getSessionDays(sunSession, monSession, tueSession, wedSession, thuSession, friSession, satSession)

// Nasdaq - PreMarket Hours - 4AM - 9.30AM EST
// Nasdaq - Normal Hours - 9.30AM - 4PM EST / 14.30PM UTC - 21.00PM UTC
// Nasdaq - PostMarket Hours - 4PM - 8.00PM EST
// EST from UCT - -5H standard time and -4H during dayligth saving
// Sydney - AEST - UTC+10 "Australia/Sydney"
// Japan - JST - UTC+9 - "Japan/Tokyo"
// Berlin - CEST - UTC+2 - "Europe/Berlin"
// Johannesburg - SAST - UTC+2 - "Africa/Johannesburg"
// London - BST - UTC+1 - "Europe/London"
// New York - EST - UTC-4 - "America/New_York"
// Configure with SAST perspective
string scriptTimezoneInput = 
     input.string("Africa/Johannesburg", tooltip = "Script Timezone", group="Sessions")
string nasdaqNormalSessionInput = 
     input.session("1530-2200", "Nasdaq Session (SAST)", group="Sessions")
string nasdaqDaysInput = 
     input.string("123456", tooltip = "1 = Sunday, 7 = Saturday (SAST)", group="Sessions")
string nasdaqSessionString = 
     nasdaqNormalSessionInput + ":" + nasdaqDaysInput

// Configure market locations with SAST perspective
string sydneySession = 
     input.session(title="Sydney", defval="0000-0900:23456", inline="Sydney Time", group="Sessions")
bool showSydneySession = 
     input.bool(title="Show Sydney", defval=true, inline="Show Sydney Time", group="Sessions")
string tokyoSession = 
     input.session(title="Tokyo", defval="0200-0945:23456", inline="Tokyo Time",group="Sessions")
bool showTokyoSession = 
     input.bool(title="Show Tokyo", defval=true, inline="Show Tokyo Time", group="Sessions")
string berlinSession = 
     input.session(title="Berlin", defval="0900-1700:23456", inline="Berlin Time", group="Sessions")
bool showBerlinSession = 
     input.bool(title="Show Berlin", defval=true, inline="Show Berlin Time", group="Sessions")
string londonSession = 
     input.session(title="London", defval="0900-1700:23456", inline="London Time", group="Sessions")
bool showLondonSession = 
     input.bool(title="Show London", defval=true, inline="Show London Time", group="Sessions")
string newYorkSession = 
     input.session(title="New York", defval="1400-2300:23456", inline="New York Time", group="Sessions")
bool showNewYorkSession = 
     input.bool(title="Show New York", defval=true, inline="Show New York Time", group="Sessions")

// https://www.tradingview.com/pine-script-docs/en/v5/concepts/Colors.html#constant-colors
sydneySessionColour  = color.new(color.silver, 0)
tokyoSessionColour   = color.new(color.green, 0)
berlinSessionColour  = color.new(color.teal, 0)
londonSessionColour  = color.new(color.orange, 0)
newYorkSessionColour = color.new(color.purple, 0)

// timeinrange(res, sess) => not na(time(res, sess, "America/New_York")) ? 1 : 0
var bool isWeekend = (dayofweek == dayofweek.sunday) or (dayofweek == dayofweek.saturday)
if barstate.isnew
    isWeekend :=  (dayofweek == dayofweek.sunday) or (dayofweek == dayofweek.saturday)

sessionBegins(sess) =>
    t = time("", sess, scriptTimezoneInput)
    timeframe.isintraday and (not barstate.isfirst) and na(t[1]) and not na(t)

inSessionTimeslot(sess) => not na(time(timeframe.period, sess, scriptTimezoneInput))

// Show Session Info
// ============================================================================================================
// plotshape(series, title style=shape.flag, location, color, offset, text, textcolor, editable, size, show_last, display) → void
// plot(barstate.islast ? bar : na, color = color.black, linewidth = 2, style = plot.style_histogram, transp = 35)

// plotMarketSessionOpen(sess, colorz) =>
//     if not isWeekend and sessionBegins(sess) and inSessionTimeslot(sess)
//         line.new(bar_index, open, bar_index, open * 2.01, extend = extend.none, color = colorz, style = line.style_solid, width = 1)

barcolor(showMarketSessionOpenCandles and not isWeekend and sessionBegins(sydneySession) and inSessionTimeslot(sydneySession) ? sydneySessionColour : na)
barcolor(showMarketSessionOpenCandles and not isWeekend and sessionBegins(tokyoSession) and inSessionTimeslot(tokyoSession) ? tokyoSessionColour : na)
barcolor(showMarketSessionOpenCandles and not isWeekend and sessionBegins(berlinSession) and inSessionTimeslot(berlinSession) ? berlinSessionColour : na)
barcolor(showMarketSessionOpenCandles and not isWeekend and sessionBegins(londonSession) and inSessionTimeslot(londonSession) ? londonSessionColour : na)
barcolor(showMarketSessionOpenCandles and not isWeekend and sessionBegins(newYorkSession) and inSessionTimeslot(newYorkSession) ? newYorkSessionColour : na)

printSessionInfo() =>
    var nameOfCurrentDay = "What day is it?"
    switch dayofweek(timenow)
        1 => nameOfCurrentDay := "Sunday"
        2 => nameOfCurrentDay := "Monday"
        3 => nameOfCurrentDay := "Tuesday"
        4 => nameOfCurrentDay := "Wednesday"
        5 => nameOfCurrentDay := "Thursday"
        6 => nameOfCurrentDay := "Friday"
        7 => nameOfCurrentDay := "Saturday"

    if (barstate.islast and showMarketSessionInfoTable)
        table topRightTableInfo = table.new(position.top_right, columns = 3, rows = 6, frame_color = color.orange, border_width = 1, border_color = color.black)

        table.cell(table_id = topRightTableInfo, row = 0, column = 0, text = "Session Times", bgcolor = color.lime)
        table.cell(table_id = topRightTableInfo, row = 0, column = 1, text = nameOfCurrentDay, bgcolor = color.lime)
        table.cell(table_id = topRightTableInfo, row = 0, column = 2, text = "", bgcolor = color.lime)
        
        table.cell(table_id = topRightTableInfo, row = 1, column = 0, text = "Sydney", bgcolor = sydneySessionColour)
        table.cell(table_id = topRightTableInfo, row = 1, column = 1, text = sydneySession)
        table.cell(table_id = topRightTableInfo, row = 1, column = 2, text = (inSessionTimeslot(sydneySession) ? "Open" : "Closed"), bgcolor = (inSessionTimeslot(sydneySession) ? color.green : color.red))

        table.cell(table_id = topRightTableInfo, row = 2, column = 0, text = "Tokyo", bgcolor = tokyoSessionColour)
        table.cell(table_id = topRightTableInfo, row = 2, column = 1, text = tokyoSession)
        table.cell(table_id = topRightTableInfo, row = 2, column = 2, text = (inSessionTimeslot(tokyoSession) ? "Open" : "Closed"), bgcolor = (inSessionTimeslot(tokyoSession) ? color.green : color.red))

        table.cell(table_id = topRightTableInfo, row = 3, column = 0, text = "Berlin", bgcolor = berlinSessionColour)
        table.cell(table_id = topRightTableInfo, row = 3, column = 1, text = berlinSession)
        table.cell(table_id = topRightTableInfo, row = 3, column = 2, text = (inSessionTimeslot(berlinSession) ? "Open" : "Closed"), bgcolor = (inSessionTimeslot(berlinSession) ? color.green : color.red))

        table.cell(table_id = topRightTableInfo, row = 4, column = 0, text = "London", bgcolor = londonSessionColour)
        table.cell(table_id = topRightTableInfo, row = 4, column = 1, text = londonSession)
        table.cell(table_id = topRightTableInfo, row = 4, column = 2, text = (inSessionTimeslot(londonSession) ? "Open" : "Closed"), bgcolor = (inSessionTimeslot(londonSession) ? color.green : color.red))

        table.cell(table_id = topRightTableInfo, row = 5, column = 0, text = "New York", bgcolor = newYorkSessionColour)
        table.cell(table_id = topRightTableInfo, row = 5, column = 1, text = newYorkSession)
        table.cell(table_id = topRightTableInfo, row = 5, column = 2, text = (inSessionTimeslot(newYorkSession) ? "Open" : "Closed"), bgcolor = (inSessionTimeslot(newYorkSession) ? color.green : color.red))

printLastBarInfo() =>
    var lastBarInfo = str.tostring(high)
    // Create label on the first bar.
    var lblLastBarInfo = label.new(bar_index, na, lastBarInfo, xloc.bar_index, yloc.price, color(na), label.style_none, color.gray, size.large, text.align_left, "A tip for you")
    // On next bars, update the label's x and y position, and the text it displays.
    label.set_xy(lblLastBarInfo, bar_index, ta.highest(10)[1])
    label.set_text(lblLastBarInfo, lastBarInfo)


printSessionInfo()

// Use to Plot variables of type float, int or bool in the indicator’s values and the Data Window
// plotchar(101, "whatisthis", "", location.top, size = size.tiny)

// printLastBarInfo()

// Trend Indicators
// ============================================================================================================
var int trendBarCount = 5
bool upTrend = ta.rising(close, trendBarCount) and ta.rising(high, trendBarCount) and (na(volume) or ta.rising(volume, trendBarCount))
plotchar(upTrend, "Up trend", "▲", location.belowbar, color = na(volume) ? color.gray : color.blue, size = size.tiny)
bool downTrend = ta.falling(close, trendBarCount) and ta.falling(high, trendBarCount) and (na(volume) or ta.falling(volume, trendBarCount))
plotchar(downTrend, "Down trend", "▼", location.belowbar, color = na(volume) ? color.gray : color.red, size = size.tiny)