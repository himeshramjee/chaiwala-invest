// @version=5

indicator(title = "Market Maker Session Times", overlay = true)

// Inputs
// TODO: Clean out inputs and find way to hide from indicator status line (top left in indicator list on chart)
// ============================================================================================================
// int startDateTime = 
//      input.time(timestamp("1 Feb 2021 00:00"), title="Start Date", group="Strategy Date Range", 
//      tooltip="Specifies the starting date and time from which on the strategy simulates buy and sell trades.")
// int endDateTime = 
//      input.time(timestamp("1 Feb 2022 11:59"), title="End Date", group="Strategy Date Range", 
//      tooltip="Specifies the ending date and time from which on the strategy simulates buy and sell trades.")

// bool sunSession = input.bool(true, title="Sun", group="Trading Session", inline="weekend")
// bool monSession = input.bool(true, title="Mon‚ÄÉ", group="Trading Session", inline="weekday")
// bool tueSession = input.bool(true, title="Tue‚ÄÉ", group="Trading Session", inline="weekday")
// bool wedSession = input.bool(true, title="Wed‚ÄÉ", group="Trading Session", inline="weekday")
// bool thuSession = input.bool(true, title="Thu‚ÄÉ", group="Trading Session", inline="weekday")
// bool friSession = input.bool(true, title="Fri‚ÄÉ‚ÄÖ‚ÄÖ", group="Trading Session", inline="weekday")
// bool satSession = input.bool(false, title="Sat‚ÄÉ‚ÄÖ", group="Trading Session", inline="weekend")

bool showMarketSessionInfoTable = 
     input.bool(true, title="Show Session Times", group="Trading Session", inline="xxx")
bool showMarketSessionOpenCandles = 
     input.bool(true, title="Highlight Session Opens", group="Trading Session", inline="xxx")

// Calculate Session Info
// ============================================================================================================
// getSessionDays(sunSession, monSession, tueSession, wedSession, thuSession, friSession, satSession) =>
//     string sessionDays = ""
//     if sunSession
//         sessionDays += "1"
//     if monSession
//         sessionDays += "2"
//     if tueSession
//         sessionDays += "3"
//     if wedSession
//         sessionDays += "4"
//     if thuSession
//         sessionDays += "5"
//     if friSession
//         sessionDays += "6"
//     if satSession
//         sessionDays += "7"

// Make a days of week string based on the value of the input checkboxes
string sessionDays = "123456"// getSessionDays(sunSession, monSession, tueSession, wedSession, thuSession, friSession, satSession)

// Nasdaq - PreMarket Hours - 4AM - 9.30AM EST
// Nasdaq - Normal Hours - 9.30AM - 4PM EST / 14.30PM UTC - 21.00PM UTC
// Nasdaq - PostMarket Hours - 4PM - 8.00PM EST
// EST from UCT - -5H standard time and -4H during dayligth saving
// Sydney - AEST - UTC+10 "Australia/Sydney"
// Japan - JST - UTC+9 - "Japan/Tokyo"
// Berlin - CEST - UTC+2 - "Europe/Berlin"
// Johannesburg - SAST - UTC+2 - "Africa/Johannesburg"
// London - BST - UTC+1 - "Europe/London"
// New York - EST - UTC-4 - "America/New_York"
// Configure with SAST perspective
string scriptTimezoneInput = "Africa/Johannesburg"
//      input.string("Africa/Johannesburg", tooltip = "Script Timezone", group="Sessions")
// string nasdaqNormalSessionInput = 
//      input.session("1530-2200", "Nasdaq Session (SAST)", group="Sessions")
// string nasdaqDaysInput = 
//      input.string("123456", tooltip = "1 = Sunday, 7 = Saturday (SAST)", group="Sessions")
// string nasdaqSessionString = 
//      nasdaqNormalSessionInput + ":" + nasdaqDaysInput

// Configure market locations with SAST perspective
// TODO: Umm...see time() which accepts a timezone
string sydneySession = "0000-0900:23456"
     // input.session(title="Sydney", defval="0000-0900:23456", inline="Sydney Time", group="Sessions")
bool showSydneySession = true
     // input.bool(title="Show Sydney", defval=true, inline="Show Sydney Time", group="Sessions")
string tokyoSession = "0200-0945:23456"
     // input.session(title="Tokyo", defval="0200-0945:23456", inline="Tokyo Time",group="Sessions")
bool showTokyoSession = true
     // input.bool(title="Show Tokyo", defval=true, inline="Show Tokyo Time", group="Sessions")
string berlinSession = "0900-1700:23456"
     // input.session(title="Berlin", defval="0900-1700:23456", inline="Berlin Time", group="Sessions")
bool showBerlinSession = true
     // input.bool(title="Show Berlin", defval=true, inline="Show Berlin Time", group="Sessions")
string londonSession = "0900-1700:23456"
     // input.session(title="London", defval="0900-1700:23456", inline="London Time", group="Sessions")
bool showLondonSession = true
     // input.bool(title="Show London", defval=true, inline="Show London Time", group="Sessions")
string newYorkSession = "1400-2300:23456"
     // input.session(title="New York", defval="1400-2300:23456", inline="New York Time", group="Sessions")
bool showNewYorkSession = true
     // input.bool(title="Show New York", defval=true, inline="Show New York Time", group="Sessions")

// https://www.tradingview.com/pine-script-docs/en/v5/concepts/Colors.html#constant-colors
sydneySessionColour  = color.new(color.silver, 0)
tokyoSessionColour   = color.new(color.green, 0)
berlinSessionColour  = color.new(color.teal, 0)
londonSessionColour  = color.new(color.orange, 0)
newYorkSessionColour = color.new(color.purple, 0)

// Basic weekend check, should evolve later
var bool brokerIsClosed = 
     (dayofweek == dayofweek.sunday) or (dayofweek == dayofweek.saturday)
if barstate.isnew
    brokerIsClosed :=  (dayofweek == dayofweek.sunday) or (dayofweek == dayofweek.saturday)

sessionBegins(sess) =>
    t = time("", sess, scriptTimezoneInput)
    timeframe.isintraday and (not barstate.isfirst) and na(t[1]) and not na(t)

inSessionTimeslot(sess) => 
    not na(time(timeframe.period, sess, scriptTimezoneInput))

// Show Session Info
// ============================================================================================================
sessionIsActive(sess) => 
    // showMarketSessionOpenCandles and not brokerIsClosed and sessionBegins(sess) and inSessionTimeslot(sess)
    showMarketSessionOpenCandles and sessionBegins(sess) and inSessionTimeslot(sess)

// plotshape(series, title style=shape.flag, location, color, offset, text, textcolor, editable, size, show_last, display) ‚Üí void

//     if barstate.isnew and sessionIsActive(sess)
//         line.new(bar_index, open, bar_index, open * 2.01, extend = extend.none, color = colorz, style = line.style_solid, width = 1)

// Highlight Session Open Candles
barcolor(barstate.isnew and sessionIsActive(sydneySession) ? sydneySessionColour : na)
plotshape(barstate.isnew and sessionIsActive(sydneySession), "Sydney", style=shape.triangleup, location=location.bottom, color=sydneySessionColour, size=size.tiny, text="üá¶üá∫", display = display.all - display.status_line)

barcolor(barstate.isnew and sessionIsActive(tokyoSession) ? tokyoSessionColour : na)
plotshape(barstate.isnew and sessionIsActive(tokyoSession), "Tokyo", style=shape.triangleup, location=location.bottom, color = tokyoSessionColour, size = size.tiny, text="üá®üá≥", display = display.all - display.status_line)

barcolor(barstate.isnew and sessionIsActive(berlinSession) ? berlinSessionColour : na)
plotshape(barstate.isnew and sessionIsActive(berlinSession), "Berlin", style=shape.triangleup, location=location.bottom, color = berlinSessionColour, size = size.tiny, text="üá©üá™", display = display.all - display.status_line)

barcolor(barstate.isnew and sessionIsActive(londonSession) ? londonSessionColour : na)
plotshape(barstate.isnew and sessionIsActive(londonSession), "London", style=shape.triangleup, location=location.bottom, color = londonSessionColour, size = size.tiny, text="üá¨üáß", display = display.all - display.status_line)

barcolor(barstate.isnew and sessionIsActive(newYorkSession) ? newYorkSessionColour : na)
plotshape(barstate.isnew and sessionIsActive(newYorkSession), "New York", style=shape.triangleup, location=location.bottom, color = newYorkSessionColour, size = size.tiny, text="üá∫üá∏", display = display.all - display.status_line)

// Print table with Session info
printSessionInfo() =>
    var nameOfCurrentDay = "What day is it?"
    switch dayofweek(timenow)
        1 => nameOfCurrentDay := "Sunday"
        2 => nameOfCurrentDay := "Monday"
        3 => nameOfCurrentDay := "Tuesday"
        4 => nameOfCurrentDay := "Wednesday"
        5 => nameOfCurrentDay := "Thursday"
        6 => nameOfCurrentDay := "Friday"
        7 => nameOfCurrentDay := "Saturday"

    if (barstate.isnew and showMarketSessionInfoTable)
        table topRightTableInfo = table.new(position.top_right, columns = 3, rows = 6, frame_color = color.orange, border_width = 1, border_color = color.black)

        table.cell(table_id = topRightTableInfo, row = 0, column = 0, text = "Session Times üåç ", bgcolor = color.lime)
        table.cell(table_id = topRightTableInfo, row = 0, column = 1, text = nameOfCurrentDay, bgcolor = color.lime)
        table.cell(table_id = topRightTableInfo, row = 0, column = 2, text = "", bgcolor = color.lime)
        
        table.cell(table_id = topRightTableInfo, row = 1, column = 0, text = "Sydney üá¶üá∫ ", bgcolor = sydneySessionColour)
        table.cell(table_id = topRightTableInfo, row = 1, column = 1, text = sydneySession)
        table.cell(table_id = topRightTableInfo, row = 1, column = 2, text = (inSessionTimeslot(sydneySession) ? "Open" : "Closed"), bgcolor = (inSessionTimeslot(sydneySession) ? color.green : color.red))

        table.cell(table_id = topRightTableInfo, row = 2, column = 0, text = "Tokyo üá®üá≥ ", bgcolor = tokyoSessionColour)
        table.cell(table_id = topRightTableInfo, row = 2, column = 1, text = tokyoSession)
        table.cell(table_id = topRightTableInfo, row = 2, column = 2, text = (inSessionTimeslot(tokyoSession) ? "Open" : "Closed"), bgcolor = (inSessionTimeslot(tokyoSession) ? color.green : color.red))

        table.cell(table_id = topRightTableInfo, row = 3, column = 0, text = "Berlin üá©üá™ ", bgcolor = berlinSessionColour)
        table.cell(table_id = topRightTableInfo, row = 3, column = 1, text = berlinSession)
        table.cell(table_id = topRightTableInfo, row = 3, column = 2, text = (inSessionTimeslot(berlinSession) ? "Open" : "Closed"), bgcolor = (inSessionTimeslot(berlinSession) ? color.green : color.red))

        table.cell(table_id = topRightTableInfo, row = 4, column = 0, text = "London üá¨üáß ", bgcolor = londonSessionColour)
        table.cell(table_id = topRightTableInfo, row = 4, column = 1, text = londonSession)
        table.cell(table_id = topRightTableInfo, row = 4, column = 2, text = (inSessionTimeslot(londonSession) ? "Open" : "Closed"), bgcolor = (inSessionTimeslot(londonSession) ? color.green : color.red))

        table.cell(table_id = topRightTableInfo, row = 5, column = 0, text = "New York üá∫üá∏ ", bgcolor = newYorkSessionColour)
        table.cell(table_id = topRightTableInfo, row = 5, column = 1, text = newYorkSession)
        table.cell(table_id = topRightTableInfo, row = 5, column = 2, text = (inSessionTimeslot(newYorkSession) ? "Open" : "Closed"), bgcolor = (inSessionTimeslot(newYorkSession) ? color.green : color.red))

// printSessionInfo()


// ============================================================================================================
// Refactor into libraries
// https://www.tradingview.com/pine-script-docs/en/v5/concepts/Libraries.html
// ============================================================================================================

// Trend Indicators
// ============================================================================================================
var int trendBarCount = 5
bool upTrend = ta.rising(close, trendBarCount) and ta.rising(high, trendBarCount) and (na(volume) or ta.rising(volume, trendBarCount))
plotchar(upTrend, "Up trend", "‚ñ≤", location.belowbar, color = na(volume) ? color.gray : color.blue, size = size.tiny)
bool downTrend = ta.falling(close, trendBarCount) and ta.falling(high, trendBarCount) and (na(volume) or ta.falling(volume, trendBarCount))
plotchar(downTrend, "Down trend", "‚ñº", location.belowbar, color = na(volume) ? color.gray : color.red, size = size.tiny)

// Price Flow Indicator
// ============================================================================================================
// Large Order Blocks
// float codiff = close - open
// plotarrow(codiff, colorup=color.new(color.teal,40), colordown=color.new(color.orange, 40), display=display.all-display.status_line)

// Price Gaps
float currentCandleSize = high - low
float previousCandleSize = high[1] - low[1] // Historical data is referenced using the square brackets.  
float candleSizeRatio = currentCandleSize / previousCandleSize
// box.new(time, open, time + 60 * 60 * 24, close, xloc=xloc.bar_time, border_style=line.style_dashed)

// Order Block Retest

// Trade Position Management
// ============================================================================================================
// Account Margin check

// Open a Buy Order

// Open a Sell Order

// Profit Conditions

// Close an Order

// Order statistics

// Here be Dragons
// ============================================================================================================
// Use to Plot variables of type float, int or bool in the indicator‚Äôs values and the Data Window
// plotchar(1.01, "", "", location.top, size = size.tiny)

// printLastBarInfo() =>
//     var lastBarInfo = str.tostring(high)
//     // Create label on the first bar.
//     var lblLastBarInfo = label.new(bar_index, na, lastBarInfo, xloc.bar_index, yloc.price, color(na), label.style_none, color.gray, size.large, text.align_left, "A tip for you")
//     // On next bars, update the label's x and y position, and the text it displays.
//     label.set_xy(lblLastBarInfo, bar_index, ta.highest(10)[1])
//     label.set_text(lblLastBarInfo, lastBarInfo)
// printLastBarInfo()

// box.new(time, open, time + 60 * 60 * 24, close, xloc=xloc.bar_time, border_style=line.style_dashed)
// a_allBoxes = box.all
// if array.size(a_allBoxes) > 0
// 	for i = 0 to array.size(a_allBoxes) - 1
// 		box.delete(array.get(a_allBoxes, i))

// float btcusd=request.security("BTCUSD",timeframe.period,close)

// currentATR = ta.atr(14)