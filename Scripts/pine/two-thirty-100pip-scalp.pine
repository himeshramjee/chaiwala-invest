//@version=5
strategy("Time-Based Entry with Low Volume", overlay=true, initial_capital=1000, pyramiding=1, default_qty_type=strategy.fixed, default_qty_value=10, process_orders_on_close=true, calc_on_every_tick=true)

// Strategy talk-through
// ============================================================================================================
// Nas100 3.30pm SAST Market Open Volatility Prediction

// 1. Open Nas chart on 30M timeframe - given the time sesitivity of our entries, this strategy will only work on 30M.
// 2. Add basic Volume indicator to chart
// 3. Monitor the 14.30 candle closure
// 4. Check the volume on that 14:30 candle
// 5. If 14:30 candles volume is >=20k, we take that as a sign of strength for candle trend continuation. i.e. if the candle is bearish then we'll take a Sell 14:31pm for the 15:30 opening and vice versa for bullish. 
// 6. Saying this another way; If 14:30 candles volume is <20k, we take the opposite of the candles trend. i.e. if there's no volume to support the candle trend, then we take the opposite position at 14:31pm for the 15:30 opening.

// Position size should be taken based on 50-80% probability of a 20usd move in your direction. And given our early entry, we need a 40usd stop loss. Strategy needs to be back tested for a late entry to reduce/eliminate that potential drawdown. 

// Define session times
// ============================================================================================================
var scriptTimezoneInput = "Africa/Johannesburg"
var time_sast = input.time(timestamp("01 May 2023 00:00"),  title="Start Date", group="Trading Days Period")
var time_end = input.time(timestamp("30 June 2023 00:00"), title="End Date", group="Trading Days Period")
// FIXME: These assumes and requires that the chart is on 30m timeframe. 
// See isTimeToTakeTrade and signalBarOffset config further down. The offset must be adjusted if the execution time is changed.
var orderExecutionTime = "1430-1431:23456"
// var orderExecutionTime = "1500-1501:23456"

// Check if current time is within specified session timeframe
inSessionTimeslot(sess) => not na(time(timeframe.period, sess, scriptTimezoneInput))

// Check if it's time to take a trade
isTimeToTakeTrade = (time >= time_sast and time <= time_end) and inSessionTimeslot(orderExecutionTime)

// Info table
// ============================================================================================================
// Define table values
symbolRow = syminfo.tickerid
formattedTime = str.format_time(time, "yyyy-MM-dd HH:mm:ss", scriptTimezoneInput) //syminfo.timezone)
tickValueRow = str.tostring(syminfo.mintick)
pointValueRow = str.tostring(syminfo.pointvalue)

table topRightTableInfo = table.new(position.top_right, columns = 5, rows = 5, frame_color = color.orange, border_width = 1, border_color = color.black)

// Table - Header
table.cell(table_id = topRightTableInfo, row = 0, column = 0, text = "Symbol")
table.cell(table_id = topRightTableInfo, row = 0, column = 1, text = "Time 🌍 ")
table.cell(table_id = topRightTableInfo, row = 0, column = 2, text = "Tick Value")
table.cell(table_id = topRightTableInfo, row = 0, column = 3, text = "Point Value")
table.cell(table_id = topRightTableInfo, row = 0, column = 4, text = "Debug info")

// Table - Row 1
table.cell(table_id = topRightTableInfo, row = 1, column = 0, text = symbolRow)
table.cell(table_id = topRightTableInfo, row = 1, column = 1, text = formattedTime)
table.cell(table_id = topRightTableInfo, row = 1, column = 2, text = tickValueRow)
table.cell(table_id = topRightTableInfo, row = 1, column = 3, text = pointValueRow)
table.cell(table_id = topRightTableInfo, row = 1, column = 4, text = str.format("{0}, {1}, {2}", str.tostring(open), str.tostring(close), str.tostring(volume)))

// Signals
// ============================================================================================================
var showBuySignals = input.bool(true, title="Show Buy signals", group="Signal configuration")
var showSellSignals = input.bool(true, title="Show Sell signals", group="Signal configuration")
buySignalActive = false
sellSignalActive = false
// FIXME: These assumes and requires that the chart is on 30m timeframe
signalBarOffset = 0
closePrice = close[signalBarOffset] // close or close[0] is the close price of the current bar, or current/latest price of a yet incomplete bar
openPrice = open[signalBarOffset] // open or open[0] is the current/latest open price
volumeTraded = volume[signalBarOffset] // volume or volume[0] is the volume of the current bar
highVolumeThreshold = input.float(20000, title="High Volume threshold", group="Signal configuration")

if isTimeToTakeTrade and barstate.isconfirmed
    // Define entry conditions
    bullish_condition = closePrice > openPrice
    bearish_condition = closePrice < openPrice
    low_volume_condition = volumeTraded <= highVolumeThreshold
    // high_volume_condition = volumeTraded > highVolumeThreshold

    buySignalActive := bearish_condition and low_volume_condition
    sellSignalActive := bullish_condition and low_volume_condition
    // buySignalActive := bullish_condition and high_volume_condition
    // sellSignalActive := bearish_condition and high_volume_condition

plotshape(series=buySignalActive and showBuySignals, style=shape.triangleup, location=location.bottom, color=color.blue, offset=-signalBarOffset)
plotshape(series=sellSignalActive and showSellSignals, style=shape.triangledown, location=location.bottom, color=color.red, offset=-signalBarOffset)
// barcolor(color=(buySignalActive and showBuySignals) ? color.blue : (sellSignalActive and showSellSignals) ? color.orange : na, offset=-signalBarOffset, editable=false, show_last=na, title="")

if buySignalActive and showBuySignals
    // label.new(x=bar_index, y=low, text="Buy", xloc=xloc.bar_index, yloc=yloc.price, color=color.blue, style=label.style_arrowup, textcolor=color.black, size=size.normal, textalign=text.align_center, tooltip="Buy at market open")

    box.new(left=time[signalBarOffset]-(time - time[1]), top=high[signalBarOffset], right=time, bottom=low[signalBarOffset], border_color=color.blue, border_width=3, border_style=line.style_solid, extend=extend.none, xloc=xloc.bar_time, bgcolor=na, text="", text_size=size.auto, text_color=color.black, text_halign=text.align_center, text_valign=text.align_bottom, text_wrap=text.wrap_auto, text_font_family=font.family_default)

if sellSignalActive and showSellSignals
    // label.new(x=bar_index, y=low, text="Sell", xloc=xloc.bar_index, yloc=yloc.price, color=color.blue, style=label.style_arrowdown, textcolor=color.black, size=size.normal, textalign=text.align_center, tooltip="Sell at market open")

    box.new(left=time[signalBarOffset]-(time - time[1]), top=high[signalBarOffset], right=time, bottom=low[signalBarOffset], border_color=color.red, border_width=3, border_style=line.style_solid, extend=extend.none, xloc=xloc.bar_time, bgcolor=na, text="", text_size=size.auto, text_color=color.black, text_halign=text.align_center, text_valign=text.align_top, text_wrap=text.wrap_auto, text_font_family=font.family_default)

// Trades - Risk Management
// ============================================================================================================
var lotSize = input.float(30, title="Trade size (lots)", group="Trade Management")
var profitTicks = input.float(2000, title="Take profit (ticks)", group="Trade Management") // 2100 ticks, 210 pips, $21
var lossTicks = input.float(3000, title="Stop loss (ticks)", group="Trade Management") // 4000 ticks, 400 pips, $40

// Trades - Position selection
// ============================================================================================================
var allowLongTrades = input.bool(true, title="Longs", group="Trades enabled")
var allowShortTrades = input.bool(true, title="Shorts", group="Trades enabled")

// Trades - Entries
// ============================================================================================================
if isTimeToTakeTrade
    longTradeID = str.format("Buy@{0}", str.tostring(close)) // using the current price of unconfirmed/realtime bar
    shortTradeID = str.format("Sell@{0}", str.tostring(close)) // using the current price of unconfirmed/realtime bar

    if buySignalActive and allowLongTrades
        strategy.entry(longTradeID, strategy.long, lotSize)

    if sellSignalActive and allowShortTrades
        strategy.entry(shortTradeID, strategy.short, lotSize)

    strategy.exit("Exit", longTradeID, loss=lossTicks, profit=profitTicks)
    strategy.exit("Exit", shortTradeID, loss=lossTicks, profit=profitTicks)


// Trades - Exits
// ============================================================================================================
// if barstate.isrealtime
//     for tradeNumber = 0 to strategy.opentrades - 1
//         unrealizedProfit = strategy.opentrades.profit(tradeNumber) // -ve for loss
//         if unrealizedProfit >= minProfitValue
//             closeComment = str.format("Profit Taken ({0, number, currency} >= {1, number, currency})", str.tostring(unrealizedProfit), minProfitValue)
//             strategy.close(strategy.opentrades.entry_id(tradeNumber), comment=closeComment)
//         if unrealizedProfit <= (maxLossValue * -1)
//             closeComment = str.format("Loss Taken ({0, number, currency} <= {1, number, currency})", str.tostring(unrealizedProfit), (maxLossValue * -1))
//             strategy.close(strategy.opentrades.entry_id(tradeNumber), comment=closeComment)